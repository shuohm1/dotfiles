# .bashrc.env

# functions for PATH
# see: https://qiita.com/key-amb/items/ce39b0c85b30888e1e3b
function get_uniqued_path() {
  local oldpath="$(echo "$1" | tr ':' '\n')"
  local newpath=""
  local p

  while read p; do
    case ":${newpath}:" in
      *:"${p}":*)
        # p is already in newpath
        ;;
      *)
        # add p to newpath
        if [ -n "${newpath}" ]; then
          newpath="${newpath}:${p}"
        else
          newpath="${p}"
        fi
        ;;
    esac
  done < <(echo "${oldpath}")

  echo "${newpath}"
}

function export_uniqued_path() {
  local uniqued="$(get_uniqued_path "${PATH}")"
  if [ -n "${uniqued}" ]; then
    export PATH="${uniqued}"
  fi
}
function export_uniqued_manpath() {
  local uniqued="$(get_uniqued_path "${MANPATH}")"
  if [ -n "${uniqued}" ]; then
    # append ':' so that 'manpath' can append paths
    # based on /etc/man_db.conf
    export MANPATH="${uniqued}:"
  fi
}

export LANG=C
export LC_ALL=
if [ -x "$($(command which which) locale 2> /dev/null)" ]; then
  export LC_CTYPE=ja_JP.utf8
fi

if [ -z "${EUID}" ]; then
  EUID="$(id -u)"
  UID="$(id -ru)"
fi

export USER="$(id -nu)"
export SHELL="$(readlink -e "/proc/$$/exe" 2> /dev/null)"
export HOSTNAME="$(hostname -s 2> /dev/null)"
export LONGHOSTNAME="$(hostname -f 2> /dev/null)"

# terminfo
if [ -d "${HOME}/.terminfo" ]; then
  export TERMINFO="${HOME}/.terminfo"
fi

# a socket directory for screen
# note: permission must be 700
_sockdirs_="${HOME}/.screen"
if [[ "${HOSTNAME}" != "localhost" ]]; then
  _sockdirs_="${_sockdirs_}:${HOME}/.screen/${HOSTNAME}"
fi
while read _sockdir_; do
  if [[ -e "${_sockdir_}" && ! -d "${_sockdir_}" ]]; then
    continue
  fi
  if [ ! -e "${_sockdir_}" ]; then
    mkdir -m 700 "${_sockdir_}" 2> /dev/null
  elif [[ "$(stat --format="%a" "${_sockdir_}")" != "700" ]]; then
    chmod 700 "${_sockdir_}" 2> /dev/null
  fi
  if [[ "$(stat --format="%a" "${_sockdir_}")" == "700" ]]; then
    export SCREENDIR="${_sockdir_}"
  fi
done < <(echo "${_sockdirs_}" | tr ':' '\n')
unset _sockdir_ _sockdirs_

# less
# --LONG-PROMPT: display an information line (the bottom of terminal)
# --RAW-CONTROL-CHARS: display control characters except color escapes
# --tabs: width of a tab
export LESS="--LONG-PROMPT --RAW-CONTROL-CHARS --tabs=4"
# custom key bindings for less
_kbin_="${HOME}/.less"
_ksrc_="${HOME}/.lesskey"
_kcmd_="$($(command which which) lesskey 2> /dev/null)"
if [[ ! -e "${_kbin_}" && -f "${_ksrc_}" && -x "${_kcmd_}" ]]; then
  "${_kcmd_}" --output "${_kbin_}" "${_ksrc_}"
fi
if [ -f "${_kbin_}" ]; then
  export LESSKEY="${_kbin_}"
fi
unset _kbin_ _ksrc_ _kcmd_
# syntax highlight for less
_hilite_="${HOME}/.source-highlight/src-hilite-lesspipe.bash"
if [ -x "${_hilite_}" ]; then
  export LESSOPEN="| ${_hilite_} %s"
fi
unset _hilite_

# editor for less, sudoedit, crontab, etc.
if [ -x "$($(command which which) vim 2> /dev/null)" ]; then
  export EDITOR=vim
fi

# vim
# since `vim -u /path/to/vimrc` may cause errors,
# use VIMINIT to read another vimrc file
# see: https://vim-jp.org/vimdoc-ja/starting.html#VIMINIT
if [ -f "${HOME}/.vimrc" ]; then
  export MYVIMRC="${HOME}/.vimrc"
  export VIMINIT="source ${MYVIMRC}"
fi

# base directory for python
# see: http://liosk.blog103.fc2.com/blog-entry-217.html
if [ -d "${HOME}/usr/python3" ]; then
  export PYTHONUSERBASE="${HOME}/usr/python3"
fi

PATH="/usr/local/sbin:/usr/sbin:/sbin:${PATH}"
PATH="/usr/local/bin:/usr/bin:/bin:${PATH}"
PATH="${HOME}/bin:${PATH}"

if [ -d "${HOME}/usr/python3/bin" ]; then
  PATH="${HOME}/usr/python3/bin:${PATH}"
fi

export_uniqued_path
export_uniqued_manpath

if [ -f "${HOME}/.bashrc.env.local" ]; then
  source "${HOME}/.bashrc.env.local"
fi
