### .screen.d/main ###
source "${HOME}/.screen.d/defaults"

# キー設定
## エスケープキーを Ctrl-T に設定
escape ^T^T
## プロセスが終了したウィンドウを明示的に閉じるキーを設定
## デフォルトではキーを押さなくてもウィンドウは閉じる
## 2つめはコマンド再実行キー (e.g.: zombie qr)
zombie ^[^?

# キーバインド登録用の一時変数
setenv c "command -c"
setenv s "screen -X"
setenv q "screen -Q"

# キーバインド
## 危険・不要なキーバインドの無効化
bind C  # clear
bind ^V # digraph
bind .  # dumptermcap
bind F  # fit
bind f  # flow
bind ^F # flow
bind h  # hardcopy
bind {  # history
bind }  # history
bind k  # kill
bind ^K # kill
bind x  # lockscreen
bind ^X # lockscreen
bind H  # log
bind L  # login
bind N  # number
bind B  # pow_break
bind D  # pow_detach
bind ^\ # quit (Ctrl-Backslash)
bind =  # removebuf
bind -  # "select -"
bind ^G # vbell
bind W  # width
bind r  # wrap
bind ^R # wrap
## ウィンドウ番号変更
bind N colon "number "
bind @ colon "number "
## ウィンドウ生成
bind c  screen
bind ^C screen
bind j  screen
bind ^J screen
bind C  colon "screen "
bind J  colon "screen "
## ウィンドウ移動
bind n   next
bind ^N  next
bind ' ' next
bind ^@  next  # Ctrl-Space
bind p   prev
bind ^P  prev
bind ^H  prev
bind ^?  prev  # 0x7F
## ウィンドウ位置の交換
bind ( bumpleft
bind ) bumpright
## 直前に表示していたウィンドウに戻る
bind o  other
bind ^O other
## ウィンドウ連続移動
setenv _SCREEN_INITCLS SW_WIN
setenv _SCREEN_INITMSG "Exit window switching mode"
source "${HOME}/.screen.d/initclass"
setenv _msg_switch "Switch windows: next/prev"
bind ; eval "$c SW_WIN" "echo '${_msg_switch}'"
bind -c SW_WIN n   eval "$c SW_WIN" "next"
bind -c SW_WIN ^N  eval "$c SW_WIN" "next"
bind -c SW_WIN ' ' eval "$c SW_WIN" "next"
bind -c SW_WIN ^@  eval "$c SW_WIN" "next"
bind -c SW_WIN p   eval "$c SW_WIN" "prev"
bind -c SW_WIN ^P  eval "$c SW_WIN" "prev"
bind -c SW_WIN ^H  eval "$c SW_WIN" "prev"
bind -c SW_WIN ^?  eval "$c SW_WIN" "prev"
bind -c SW_WIN l   eval "$c SW_WIN" "next"
bind -c SW_WIN h   eval "$c SW_WIN" "prev"
## ウィンドウ連続交換
setenv _SCREEN_INITCLS MV_WIN
setenv _SCREEN_INITMSG "Exit window moving mode"
source "${HOME}/.screen.d/initclass"
setenv _msg_mvwin "Move windows: next/prev"
bind + eval "$c MV_WIN" "echo '${_msg_mvwin}'"
bind -c MV_WIN n   eval "$c MV_WIN" "bumpright"
bind -c MV_WIN ^N  eval "$c MV_WIN" "bumpright"
bind -c MV_WIN ' ' eval "$c MV_WIN" "bumpright"
bind -c MV_WIN ^@  eval "$c MV_WIN" "bumpright"
bind -c MV_WIN p   eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN ^P  eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN ^H  eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN ^?  eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN l   eval "$c MV_WIN" "bumpright"
bind -c MV_WIN h   eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN (   eval "$c MV_WIN" "bumpleft"
bind -c MV_WIN )   eval "$c MV_WIN" "bumpright"
## ウィンドウ連続移動/交換モード間の変更
bind -c SW_WIN ; eval "$c MV_WIN" "echo '${_msg_mvwin}'"
bind -c SW_WIN + eval "$c MV_WIN" "echo '${_msg_mvwin}'"
bind -c MV_WIN ; eval "$c SW_WIN" "echo '${_msg_switch}'"
bind -c MV_WIN + eval "$c SW_WIN" "echo '${_msg_switch}'"
unsetenv _msg_switch
unsetenv _msg_mvwin
## 二桁番号のウィンドウ選択
setenv _SCREEN_INITCLS SELWIN_U
setenv _SCREEN_INITMSG "Exit window selecting mode"
source "${HOME}/.screen.d/initclass"
setenv _SCREEN_INITCLS SELWIN_L
setenv _SCREEN_INITMSG "Exit window selecting mode"
source "${HOME}/.screen.d/initclass"
setenv WINPREFIX 0
bind - eval "$c SELWIN_U"
### 十の位
setenv _msg_selwin '"Window selecting mode: xx"'
bind -c SELWIN_U 0 eval "$c SELWIN_L" "setenv WINPREFIX 0"
bind -c SELWIN_U 1 eval "$c SELWIN_L" "setenv WINPREFIX 1"
bind -c SELWIN_U 2 eval "$c SELWIN_L" "setenv WINPREFIX 2"
bind -c SELWIN_U 3 eval "$c SELWIN_L" "setenv WINPREFIX 3"
bind -c SELWIN_U 4 eval "$c SELWIN_L" "setenv WINPREFIX 4"
bind -c SELWIN_U 5 eval "$c SELWIN_L" "setenv WINPREFIX 5"
bind -c SELWIN_U 6 eval "$c SELWIN_L" "setenv WINPREFIX 6"
bind -c SELWIN_U 7 eval "$c SELWIN_L" "setenv WINPREFIX 7"
bind -c SELWIN_U 8 eval "$c SELWIN_L" "setenv WINPREFIX 8"
bind -c SELWIN_U 9 eval "$c SELWIN_L" "setenv WINPREFIX 9"
bind -c SELWIN_U ? eval "$c SELWIN_U" "echo ${_msg_selwin}"
bind -c SELWIN_U - select
## 一の位
setenv _msg_selwin '"Window selecting mode: ${WINPREFIX}x"'
bind -c SELWIN_L 0 eval 'select ${WINPREFIX}0'
bind -c SELWIN_L 1 eval 'select ${WINPREFIX}1'
bind -c SELWIN_L 2 eval 'select ${WINPREFIX}2'
bind -c SELWIN_L 3 eval 'select ${WINPREFIX}3'
bind -c SELWIN_L 4 eval 'select ${WINPREFIX}4'
bind -c SELWIN_L 5 eval 'select ${WINPREFIX}5'
bind -c SELWIN_L 6 eval 'select ${WINPREFIX}6'
bind -c SELWIN_L 7 eval 'select ${WINPREFIX}7'
bind -c SELWIN_L 8 eval 'select ${WINPREFIX}8'
bind -c SELWIN_L 9 eval 'select ${WINPREFIX}9'
bind -c SELWIN_L ? eval "$c SELWIN_L" "echo ${_msg_selwin}"
bind -c SELWIN_L - eval 'colon "select ${WINPREFIX}"'
unsetenv _msg_selwin
## ウィンドウ削除
bind K kill
## 検索時の大文字小文字の区別の切り替え
bind I ignorecase
## 文字コード変更
bind u eval "encoding UTF-8" "echo 'Set encoding to UTF-8'"
bind w eval "encoding UTF-8" "echo 'Set encoding to UTF-8'"
bind e eval "encoding eucJP" "echo 'Set encoding to EUC-JP'"
bind s eval "encoding SJIS"  "echo 'Set encoding to SHIFT-JIS'"
bind j eval "encoding jis"   "echo 'Set encoding to JIS'"
## リージョン分割
bind S split
bind V split -v
bind | split -v
bind X remove
bind O only
bind Q only
## リージョン移動
bind ^I focus
bind ^U focus prev
## リージョンリサイズ
bind r resize
bind R eval "command -c resize" "echo 'Region resizing mode'"
bind -c resize h eval "command -c resize" "resize -h -1"
bind -c resize l eval "command -c resize" "resize -h +1"
bind -c resize j eval "command -c resize" "resize -v +1"
bind -c resize k eval "command -c resize" "resize -v -1"

# キーバインド登録用の一時変数を削除
unsetenv c
unsetenv s
unsetenv q

# スクロールバッファ行数
defscrollback 10000

# メッセージをハードステータスに表示する最大/最小秒数
msgwait 3
msgminwait 0

# ハードステータス
setenv a ""
setenv a "$a%{= Wk}"  # 背景色 bright White, 前景色 blacK
setenv a "$a["        # "["
setenv a "$a%0`"      # backtick: ユーザ名
setenv a "$a@"        # "@"
setenv a "$a%H"       # ホスト名
setenv a "$a] "       # "] "
setenv a "$a%0L="     # 左端から 0% の位置までパディング
#                     # - 左端から 0% の位置は既に過ぎているので何も起こらない
#                     # - 実態は切り詰め区間の左端を設定するためのもの
#                     # - L : 切り詰めはせずにパディングのみを行う
setenv a "$a%-Lw"     # 現在のウィンドウより左のウィンドウ一覧
setenv a "$a%40L>"    # 切り詰め発生時にはこの位置を左端から 40% にする
#                     # - L : 切り詰められた箇所に "..." を配置
setenv a "$a%{= Ck}"  # 背景色 bright Cyan, 前景色 blacK
setenv a "$a%n"       # ウィンドウ番号
setenv a "$a*%f"      # ウィンドウのフラグ
setenv a "$a "        # space
setenv a "$a%t"       # ウィンドウ名
setenv a "$a%{-}"     # 直前の色/属性指定を元に戻す
setenv a "$a%+Lw"     # 現在のウィンドウより右のウィンドウ一覧
setenv a "$a%-027="   # 右端から27文字目の直前までパディング
#                     # - 同時に切り詰め区間の右端を設定したことにもなる
setenv a "$a ["       # " ["
setenv a "$a%Y-%m-%d" # 日付 YYYY-MM-DD
setenv a "$a("        # "("
setenv a "$a%1`"      # backtick: 曜日名略称 (ロケール非依存)
setenv a "$a) "       # ") "
setenv a "$a%0c:%s"   # 現在時刻 HH:MM:SS (24時間表記)
setenv a "$a]"        # "]"
hardstatus alwayslastline "$a"
unsetenv a

# Backtick
# backtick id lifespan autorefresh cmd args...
#   id          : %id` に代入する際の ID
#   lifespan    : 出力の有効秒数
#   autorefresh : 自動リフレッシュ秒数
#   lifespan も autorefresh も 0 の場合はコマンドの出力が逐次出力される
## ユーザ名
backtick 0 0 0 whoami
## 曜日名略称 (一時的にロケールを C にして date)
backtick 1 60 60 sh -c 'LC_ALL=C date +"%a"'

# キャプション
setenv a ""
setenv a "$a%0L>"    # 切り詰め発生時にはこの位置を左端にする
#                    # - L : 切り詰められた箇所に "..." を配置
setenv a "$a%{= Yk}" # 背景色 bright Yellow, 前景色 blacK
setenv a "$a%?%P"    # if copy/paste-mode then
setenv a "$a%{= Bk}" #   背景色 bright Blue, 前景色 blacK
setenv a "$a%?"      # fi
setenv a "$a%?%F"    # if focus then
#                    #
setenv a "$a%:"      # else
setenv a "$a%{= Kw}" #   背景色 bright blacK, 前景色 White
setenv a "$a%?"      # fi
setenv a "$a%n"      # ウィンドウ番号
setenv a "$a%?%F"    # if focus then
setenv a "$a*"       #   "*": 現在のウィンドウを表すフラグ
setenv a "$a%?"      # fi
setenv a "$a%f"      # ウィンドウのフラグ
setenv a "$a "       # space
setenv a "$a%t"      # ウィンドウ名
setenv a "$a%?"      # if len(next-escape) > 0 then
setenv a "$a "       #   space
setenv a "$a%h"      #   ウィンドウから発せられたハードステータス
#                    #   - echo -e "\e_メッセージ\e\\" で出力可能
setenv a "$a%?"      # fi
setenv a "$a%-16="   # 右端から19文字目の直前までパディング
#                    # - 同時に切り詰め区間の右端を設定
setenv a "$a%?%P"    # if copy/history-mode then
setenv a "$a%{= BW}" #   背景色 bright Blue, 前景色 bright White
setenv a "$a *Copy/History* "
setenv a "$a%:"      # else
setenv a "$a%-0="    #   右端までパディング
setenv a "$a%?"      # fi
caption always "$a"
unsetenv a

# イベント発生ウィンドウの装飾
rendition bell "= Rk"
rendition monitor "=u Bk"
rendition silence "=u wk"
rendition so "= yk"

# Alternate Screen を使用する
## less 等の全画面コマンド終了後に元の画面に戻る
altscreen on

# 自動デタッチ
autodetach on

# ログイン情報を utmp に吐かない
deflogin off

# ホームディレクトリに移動
chdir "$HOME"
